# Load the kinematics module
loadrt [KINS]KINEMATICS

# Load the EMC (Enhanced Machine Controller) motion module with specified base and servo periods and the number of joints
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS

##################################################################
#           PINOUT
##################################################################

# The following pinout is configured for XYZA, XYZ have endstops, and a fan. A 3D printer, basically.

# GPIO  Pin     Purpose
# 02    3       X Step
# 03    5       X Direction
# 04    7       X Enable
# 05    29      A Step
# 06    31      A Direction
# 07    26      -
# 08    24      -
# 09    21      Z Direction
# 10    19      Z Step
# 11    23      Z Enable
# 12    32      -
# 13    33      A Enable
# 14    8       X Stop
# 15    10      Y Stop
# 16    36      -
# 17    11      Y Step
# 18    12      Z Stop
# 19    35      -
# 20    38      -
# 21    40      -
# 22    15      Y Enable
# 23    16      -
# 24    18      -
# 25    22      -
# 26    37      Fan 0 PWM signal
# 27    13      Y Direction

# Now that the pinout is planned, we can lay out the masks:
# The top row represents GPIO numbers (not physical pins)
# Below, set bits for direction (0=in, 1=out) and exclusion (0=use, 1=don't use)
# GPIO 1 & 0 are not used
# Documentation:
# http://linuxcnc.org/docs/html/drivers/hal_pi_gpio.html

# GPIO numbers:     27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02
# Exclusion mask:   0  0  1  1  1  0  1  1  1  0  0  1  0  0  0  1  0  0  0  1  1  0  0  0  0  0
# Direction mask:   1  1  1  1  1  1  1  1  1  0  1  1  0  0  1  1  1  1  1  1  1  1  1  1  1  1

# Hexadecimal conversion using:
# https://www.unitconverters.net/numbers/binary-to-hex.htm
# Plug the resulting number in:

loadrt hal_pi_gpio exclude=0xEE4460 dir=0x3FECFFF

##################################################################
#           MODULES
##################################################################

# Load the step generator module for four step/dir interfaces:
loadrt stepgen step_type=0,0,0,0

# Load the PWM (Pulse Width Modulation) generator module with one output of type 0
loadrt pwmgen output_type=0

# invert the enable signal
loadrt not names=xinvert,yinvert,zinvert,ainvert

# Add functions to threads
addf motion-command-handler servo-thread
addf motion-controller servo-thread

addf hal_pi_gpio.read base-thread
addf hal_pi_gpio.write base-thread

addf stepgen.update-freq servo-thread
addf stepgen.capture-position servo-thread
addf stepgen.make-pulses base-thread

addf pwmgen.update servo-thread
addf pwmgen.make-pulses base-thread

##################################################################
#           WIRING
##################################################################

# CONNECTIONS
# the connection syntax is as follows:
# net WIRE_NAME PIN_OUT => PIN_IN
# The WIRE_NAME could be concieved as "blue", "yellow with green stripes", etc.

# Fan 0 PWM output
net fan0-pwr spindle.0.speed-out-abs => pwmgen.0.value
net fan0-pwm pwmgen.0.pwm => hal_pi_gpio.pin-37-out

setp pwmgen.0.enable 1
setp pwmgen.0.scale 255

# Connect homing switches to GPIO pins
net min-home-x     <=  hal_pi_gpio.pin-08-in
net min-home-y     <=  hal_pi_gpio.pin-10-in
net min-home-z     <=  hal_pi_gpio.pin-12-in

# Connect homing switches to joints
net min-home-x => joint.0.home-sw-in
net min-home-y => joint.1.home-sw-in
net min-home-z => joint.2.home-sw-in

# Motor Outputs
# Note: Pin numbers are Raspberry Pi pin numbers, not GPIO numbers
# The enable signals are inverted

net xstep     => hal_pi_gpio.pin-03-out
net xdir      => hal_pi_gpio.pin-05-out
net xenable   => xinvert.in
net xinvert.out => hal_pi_gpio.pin-07-out

net ystep     => hal_pi_gpio.pin-11-out
net ydir      => hal_pi_gpio.pin-13-out
net yenable   => yinvert.in
net yinvert.out => hal_pi_gpio.pin-15-out

net zstep     => hal_pi_gpio.pin-19-out
net zdir      => hal_pi_gpio.pin-21-out
net zenable   => zinvert.in
net zinvert.out => hal_pi_gpio.pin-23-out

net astep     => hal_pi_gpio.pin-29-out
net adir      => hal_pi_gpio.pin-31-out
net aenable   => ainvert.in
net ainvert.out => hal_pi_gpio.pin-33-out

##################################################################
#           Axis Configuation
##################################################################

# Current timings: DRV8825
# get yours at:
# http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Stepper_Drive_Timing

# Configure step generator for each joint
# Joint 0 (X axis)
setp stepgen.0.position-scale [JOINT_0]SCALE
setp stepgen.0.steplen 1900
setp stepgen.0.stepspace 1900
setp stepgen.0.dirhold 650
setp stepgen.0.dirsetup 650
setp stepgen.0.maxaccel [JOINT_0]STEPGEN_MAXACCEL
net xpos-cmd joint.0.motor-pos-cmd => stepgen.0.position-cmd
net xpos-fb stepgen.0.position-fb => joint.0.motor-pos-fb
net xstep <= stepgen.0.step
net xdir <= stepgen.0.dir
net xenable joint.0.amp-enable-out => stepgen.0.enable

# Joint 1 (Y axis)
setp stepgen.1.position-scale [JOINT_1]SCALE
setp stepgen.1.steplen 1900
setp stepgen.1.stepspace 1900
setp stepgen.1.dirhold 650
setp stepgen.1.dirsetup 650
setp stepgen.1.maxaccel [JOINT_1]STEPGEN_MAXACCEL
net ypos-cmd joint.1.motor-pos-cmd => stepgen.1.position-cmd
net ypos-fb stepgen.1.position-fb => joint.1.motor-pos-fb
net ystep <= stepgen.1.step
net ydir <= stepgen.1.dir
net yenable joint.1.amp-enable-out => stepgen.1.enable

# Joint 2 (Z axis)
setp stepgen.2.position-scale [JOINT_2]SCALE
setp stepgen.2.steplen 1900
setp stepgen.2.stepspace 1900
setp stepgen.2.dirhold 650
setp stepgen.2.dirsetup 650
setp stepgen.2.maxaccel [JOINT_2]STEPGEN_MAXACCEL
net zpos-cmd joint.2.motor-pos-cmd => stepgen.2.position-cmd
net zpos-fb stepgen.2.position-fb => joint.2.motor-pos-fb
net zstep <= stepgen.2.step
net zdir <= stepgen.2.dir
net zenable joint.2.amp-enable-out => stepgen.2.enable

# Joint 3 (A axis)
setp stepgen.3.position-scale [JOINT_3]SCALE
setp stepgen.3.steplen 1900
setp stepgen.3.stepspace 1900
setp stepgen.3.dirhold 650
setp stepgen.3.dirsetup 650
setp stepgen.3.maxaccel [JOINT_3]STEPGEN_MAXACCEL
net apos-cmd joint.3.motor-pos-cmd => stepgen.3.position-cmd
net apos-fb stepgen.3.position-fb => joint.3.motor-pos-fb
net astep <= stepgen.3.step
net adir <= stepgen.3.dir
net aenable joint.3.amp-enable-out => stepgen.3.enable

net estop-out <= iocontrol.0.user-enable-out
net estop-out => iocontrol.0.emc-enable-in
